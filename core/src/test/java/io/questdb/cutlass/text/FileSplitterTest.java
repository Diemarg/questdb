package io.questdb.cutlass.text;

import io.questdb.Metrics;
import io.questdb.WorkerPoolAwareConfiguration;
import io.questdb.cairo.CairoConfiguration;
import io.questdb.cairo.CairoEngine;
import io.questdb.cairo.DefaultCairoConfiguration;
import io.questdb.cairo.PartitionBy;
import io.questdb.cairo.vm.MemoryCMARWImpl;
import io.questdb.cairo.vm.MemoryCMRImpl;
import io.questdb.cairo.vm.MemoryPMARImpl;
import io.questdb.cairo.vm.Vm;
import io.questdb.griffin.*;
import io.questdb.mp.WorkerPool;
import io.questdb.std.*;
import io.questdb.std.datetime.DateFormat;
import io.questdb.std.datetime.microtime.TimestampFormatCompiler;
import io.questdb.std.str.Path;
import io.questdb.test.tools.TestUtils;
import org.jetbrains.annotations.Nullable;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.util.*;

/**
 *
 */
public class FileSplitterTest extends AbstractGriffinTest {
    private static final Rnd rnd = new Rnd();

    //test csv with timestamp over buffer boundaries
    //test csv with timestamp over buffer boundaries that's too long 
    //test csv with bad timestamp value 
    //test csv with quoted field that is too long and doesn't end before newline (should make a mess also with TextLexer/TextLoader)

    @Before
    public void before() throws IOException {
        rnd.reset();
        inputRoot = new File(".").getAbsolutePath();
        inputWorkRoot = temp.newFolder("imports" + System.currentTimeMillis()).getAbsolutePath();
    }

    @Test
    public void testFindChunkBoundariesForEmptyFile() throws Exception {
        executeWithPool(3, 8, (CairoEngine engine, SqlCompiler compiler, SqlExecutionContext sqlExecutionContext) ->
                assertChunkBoundariesFor("test-quotes-empty.csv", null, sqlExecutionContext)
        );
    }

    @Test
    public void testFindChunkBoundariesForFileWithNoQuotes() throws Exception {
        executeWithPool(3, 8, (CairoEngine engine, SqlCompiler compiler, SqlExecutionContext sqlExecutionContext) ->
                assertChunkBoundariesFor("test-import.csv", list(0, 0, 4565, 44, 9087, 87, 13612, 130), sqlExecutionContext)
        );
    }

    @Test
    public void testFindChunkBoundariesWith1WorkerForFileWithLongLines() throws Exception {
        executeWithPool(1, 8, (CairoEngine engine, SqlCompiler compiler, SqlExecutionContext sqlExecutionContext) ->
                assertChunkBoundariesFor("test-quotes-small.csv", list(0, 0, 241, 0), sqlExecutionContext)
        );
    }

    @Test
    public void testFindChunkBoundariesForFileWithLongLines() throws Exception {
        executeWithPool(3, 8, (CairoEngine engine, SqlCompiler compiler, SqlExecutionContext sqlExecutionContext) ->
                assertChunkBoundariesFor("test-quotes-small.csv", list(0, 0, 170, 2, 241, 3), sqlExecutionContext)
        );
    }

    @Test
    public void testFindChunkBoundariesInFileWithOneLongLine() throws Exception {
        executeWithPool(2, 8, (CairoEngine engine, SqlCompiler compiler, SqlExecutionContext sqlExecutionContext) ->
                assertChunkBoundariesFor("test-quotes-oneline.csv", list(0, 0, 234, 1), sqlExecutionContext)
        );
    }

    @Test
    public void testFindChunkBoundariesInFileWithOneLongLineWithManyWorkers() throws Exception {
        executeWithPool(7, 8, (CairoEngine engine, SqlCompiler compiler, SqlExecutionContext sqlExecutionContext) ->
                assertChunkBoundariesFor("test-quotes-oneline.csv", list(0, 0, 234, 1), sqlExecutionContext)
        );
    }

    @Test
    public void testFindChunkBoundariesInLargerCsv() throws Exception {
        executeWithPool(4, 8, (CairoEngine engine, SqlCompiler compiler, SqlExecutionContext sqlExecutionContext) ->
                assertChunkBoundariesFor("test-quotes-big.csv", list(0, 0, 16797, 254, 33514, 503, 50216, 752, 66923, 1001), sqlExecutionContext)
        );
    }

    @Test
    public void testIndexMerge() throws Exception {
        FilesFacade ff = engine.getConfiguration().getFilesFacade();
        try (Path path = new Path().of(inputRoot).slash().concat("chunks")) {
            int plen = path.length();
            path.concat("part").slash$();

            if (!ff.exists(path)) {
                int result = ff.mkdirs(path, engine.getConfiguration().getMkDirMode());
                if (result != 0) {
                    LOG.info().$("Couldn't create partition dir=").$(path).$();//TODO: maybe we can ignore it
                }
            }
            int chunks = 10;
            createAndSortChunkFiles(path, chunks, 10_000, 1_000_000);

            try (FileIndexer indexer = new FileIndexer(sqlExecutionContext)) {
                path.trimTo(plen);
//                indexer.mergePartitionIndexes(path.$(), chunks);
                //todo: test!!
            }
            path.trimTo(plen);
            ff.rmdir(path.$()); // clean all
        }
    }

    @Ignore
    @Test
    public void testProcessLargeCsvWithPool() throws Exception {
        executeWithPool(8, 16, (CairoEngine engine, SqlCompiler compiler, SqlExecutionContext sqlExecutionContext) -> {
            //String inputDir = new File(".").getAbsolutePath();
            inputRoot = new File("E:/dev/tmp").getAbsolutePath();

            //try (Path path = new Path().of(inputDir).slash().concat("src/test/resources/csv/test-import.csv").$();
            try (FileIndexer indexer = new FileIndexer(sqlExecutionContext)) {

                DateFormat dateFormat = new TimestampFormatCompiler().compile("yyyy-MM-ddTHH:mm:ss.SSSUUUZ");
                //trips300mil.csv
                indexer.of("unordered_trips_300mil.csv", PartitionBy.HOUR, (byte) ',', 2, dateFormat, true);
                indexer.process();
            }
        });
    }

    private LongList list(long... values) {
        LongList result = new LongList();
        for (long l : values) {
            result.add(l);
        }
        return result;
    }

    private void assertChunkBoundariesFor(String fileName, LongList expectedBoundaries, SqlExecutionContext sqlExecutionContext) throws SqlException, IOException {
        FilesFacade ff = engine.getConfiguration().getFilesFacade();
        inputRoot = new File("./src/test/resources/csv/").getAbsolutePath();

        try (Path path = new Path().of(inputRoot).slash().concat(fileName).$();
             FileIndexer indexer = new FileIndexer(sqlExecutionContext)) {
            indexer.setMinChunkSize(1);
            indexer.of(fileName, PartitionBy.DAY, (byte) ',', -1, null, false);

            long fd = ff.openRO(path);
            Assert.assertTrue(fd > -1);

            try {
                LongList actualBoundaries = indexer.findChunkBoundaries(fd);
                Assert.assertEquals(expectedBoundaries, actualBoundaries);
            } finally {
                ff.close(fd);
            }
        }
    }

    @Test
    public void testIndexChunksInSmallCsvWith1Worker() throws Exception {
        assertIndexChunks(1, "test-quotes-small.csv",
                chunk("2022-05-10/0_1", 1652183520000000L, 0L),
                chunk("2022-05-11/0_1", 1652269920000000L, 75L, 1652269920001000L, 170L));
    }

    @Test
    public void testIndexChunksInSmallCsvWith2Workers() throws Exception {
        assertIndexChunks(2, "test-quotes-small.csv",
                chunk("2022-05-10/0_1", 1652183520000000L, 0L),
                chunk("2022-05-11/0_1", 1652269920000000L, 75L),
                chunk("2022-05-11/1_1", 1652269920001000L, 170L));
    }

    @Test
    public void testIndexChunksInSmallCsvWith3Workers() throws Exception {
        assertIndexChunks(3, "test-quotes-small.csv",
                chunk("2022-05-10/0_1", 1652183520000000L, 0L),
                chunk("2022-05-11/0_1", 1652269920000000L, 75L),
                chunk("2022-05-11/1_1", 1652269920001000L, 170L));
    }

    @Test
    public void testIndexChunksInSmallCsvWith4Workers() throws Exception {
        assertIndexChunks(4, "test-quotes-small.csv",
                chunk("2022-05-10/0_1", 1652183520000000L, 0L),
                chunk("2022-05-11/1_1", 1652269920000000L, 75L),
                chunk("2022-05-11/2_1", 1652269920001000L, 170L));
    }

    @Test
    public void testIndexChunksInSingleLineCsvWithPool() throws Exception {
        assertIndexChunks(4, "test-quotes-oneline.csv",
                chunk("2022-05-14/0_1", 1652529121000000L, 0L));
    }

    @Test
    public void testIndexChunksInEmptyCsv() throws Exception {
        assertIndexChunks(4, "test-quotes-empty.csv");
    }

    @Test//timestamp should be reassembled properly via rolling buffer
    public void testIndexChunksInEmptyCsvWithTimestampFieldSplitBetweenReadBuffers() throws Exception {
        assertIndexChunks(4, "yyyy-MM-ddTHH:mm:ss.SSSZ", PartitionBy.DAY, 1, "test-quotes-small.csv",
                chunk("2022-05-10/0_1", 1652183520000000L, 0L),
                chunk("2022-05-11/1_1", 1652269920000000L, 75L),
                chunk("2022-05-11/2_1", 1652269920001000L, 170L));
    }

    @Test//timestamp is ignored if it doesn't fit in ts rolling buffer 
    public void testIndexChunksInEmptyCsvWithTooLongTimestampFieldSplitBetweenReadBuffers() throws Exception {
        assertIndexChunks(2, "yyyy-MM-ddTHH:mm:ss.SSSZ", PartitionBy.DAY, 1, "test-quotes-tstoolong.csv",
                chunk("2022-05-10/0_1", 1652183520000000L, 0L),
                chunk("2022-05-11/1_1", 1652269920001000L, 249L));
    }

    @Test
    public void testIndexChunksInBigCsv() throws Exception { //buffer = 93
        assertIndexChunks(4, "yyyy-MM-ddTHH:mm:ss.SSSUUUZ", PartitionBy.YEAR, "test-quotes-big.csv",
                chunk("1970/0_1", 86400000000L, 31L, 172800000000L, 94L, 259200000000L, 157L, 345600000000L, 220L, 432000000000L, 283L, 518400000000L, 346L, 604800000000L, 409L, 691200000000L, 472L, 777600000000L, 535L, 864000000000L, 598L, 950400000000L, 663L, 1036800000000L, 728L, 1123200000000L, 794L, 1209600000000L, 859L, 1296000000000L, 924L, 1382400000000L, 989L, 1468800000000L, 1054L, 1555200000000L, 1119L, 1641600000000L, 1184L, 1728000000000L, 1249L, 1814400000000L, 1315L, 1900800000000L, 1380L, 1987200000000L, 1445L, 2073600000000L, 1510L, 2160000000000L, 1575L, 2246400000000L, 1640L, 2332800000000L, 1705L, 2419200000000L, 1771L, 2505600000000L, 1836L, 2592000000000L, 1902L, 2678400000000L, 1972L, 2764800000000L, 2037L, 2851200000000L, 2102L, 2937600000000L, 2168L, 3024000000000L, 2233L, 3110400000000L, 2298L, 3196800000000L, 2363L, 3283200000000L, 2428L, 3369600000000L, 2493L, 3456000000000L, 2558L, 3542400000000L, 2623L, 3628800000000L, 2688L, 3715200000000L, 2753L, 3801600000000L, 2818L, 3888000000000L, 2883L, 3974400000000L, 2948L, 4060800000000L, 3013L, 4147200000000L, 3078L, 4233600000000L, 3143L, 4320000000000L, 3208L, 4406400000000L, 3274L, 4492800000000L, 3339L, 4579200000000L, 3404L, 4665600000000L, 3469L, 4752000000000L, 3534L, 4838400000000L, 3599L, 4924800000000L, 3664L, 5011200000000L, 3729L, 5097600000000L, 3794L, 5184000000000L, 3860L, 5270400000000L, 3925L, 5356800000000L, 3990L, 5443200000000L, 4055L, 5529600000000L, 4120L, 5616000000000L, 4185L, 5702400000000L, 4250L, 5788800000000L, 4315L, 5875200000000L, 4380L, 5961600000000L, 4445L, 6048000000000L, 4510L, 6134400000000L, 4575L, 6220800000000L, 4640L, 6307200000000L, 4705L, 6393600000000L, 4770L, 6480000000000L, 4835L, 6566400000000L, 4900L, 6652800000000L, 4965L, 6739200000000L, 5031L, 6825600000000L, 5096L, 6912000000000L, 5161L, 6998400000000L, 5226L, 7084800000000L, 5291L, 7171200000000L, 5356L, 7257600000000L, 5421L, 7344000000000L, 5486L, 7430400000000L, 5551L, 7516800000000L, 5616L, 7603200000000L, 5681L, 7689600000000L, 5746L, 7776000000000L, 5811L, 7862400000000L, 5876L, 7948800000000L, 5941L, 8035200000000L, 6006L, 8121600000000L, 6071L, 8208000000000L, 6136L, 8294400000000L, 6201L, 8380800000000L, 6266L, 8467200000000L, 6331L, 8553600000000L, 6396L, 8640000000000L, 6461L, 8726400000000L, 6528L, 8812800000000L, 6595L, 8899200000000L, 6662L, 8985600000000L, 6729L, 9072000000000L, 6796L, 9158400000000L, 6863L, 9244800000000L, 6930L, 9331200000000L, 6997L, 9417600000000L, 7064L, 9504000000000L, 7131L, 9590400000000L, 7198L, 9676800000000L, 7265L, 9763200000000L, 7332L, 9849600000000L, 7399L, 9936000000000L, 7466L, 10022400000000L, 7534L, 10108800000000L, 7601L, 10195200000000L, 7668L, 10281600000000L, 7735L, 10368000000000L, 7802L, 10454400000000L, 7869L, 10540800000000L, 7936L, 10627200000000L, 8003L, 10713600000000L, 8070L, 10800000000000L, 8137L, 10886400000000L, 8204L, 10972800000000L, 8271L, 11059200000000L, 8339L, 11145600000000L, 8406L, 11232000000000L, 8473L, 11318400000000L, 8540L, 11404800000000L, 8607L, 11491200000000L, 8674L, 11577600000000L, 8741L, 11664000000000L, 8808L, 11750400000000L, 8875L, 11836800000000L, 8942L, 11923200000000L, 9009L, 12009600000000L, 9076L, 12096000000000L, 9143L, 12182400000000L, 9210L, 12268800000000L, 9278L, 12355200000000L, 9345L, 12441600000000L, 9412L, 12528000000000L, 9480L, 12614400000000L, 9547L, 12700800000000L, 9614L, 12787200000000L, 9681L, 12873600000000L, 9748L, 12960000000000L, 9815L, 13046400000000L, 9882L, 13132800000000L, 9949L, 13219200000000L, 10017L, 13305600000000L, 10084L, 13392000000000L, 10151L, 13478400000000L, 10218L, 13564800000000L, 10287L, 13651200000000L, 10354L, 13737600000000L, 10421L, 13824000000000L, 10488L, 13910400000000L, 10555L, 13996800000000L, 10622L, 14083200000000L, 10689L, 14169600000000L, 10756L, 14256000000000L, 10823L, 14342400000000L, 10890L, 14428800000000L, 10957L, 14515200000000L, 11024L, 14601600000000L, 11091L, 14688000000000L, 11158L, 14774400000000L, 11226L, 14860800000000L, 11293L, 14947200000000L, 11360L, 15033600000000L, 11427L, 15120000000000L, 11494L, 15206400000000L, 11561L, 15292800000000L, 11628L, 15379200000000L, 11695L, 15465600000000L, 11762L, 15552000000000L, 11829L, 15638400000000L, 11896L, 15724800000000L, 11963L, 15811200000000L, 12030L, 15897600000000L, 12097L, 15984000000000L, 12164L, 16070400000000L, 12231L, 16156800000000L, 12299L, 16243200000000L, 12366L, 16329600000000L, 12434L, 16416000000000L, 12501L, 16502400000000L, 12568L, 16588800000000L, 12635L, 16675200000000L, 12702L, 16761600000000L, 12769L, 16848000000000L, 12836L, 16934400000000L, 12903L, 17020800000000L, 12970L, 17107200000000L, 13037L, 17193600000000L, 13104L, 17280000000000L, 13172L, 17366400000000L, 13240L, 17452800000000L, 13307L, 17539200000000L, 13374L, 17625600000000L, 13441L, 17712000000000L, 13508L, 17798400000000L, 13575L, 17884800000000L, 13642L, 17971200000000L, 13710L, 18057600000000L, 13777L, 18144000000000L, 13844L, 18230400000000L, 13911L, 18316800000000L, 13978L, 18403200000000L, 14045L, 18489600000000L, 14112L, 18576000000000L, 14179L, 18662400000000L, 14246L, 18748800000000L, 14313L, 18835200000000L, 14380L, 18921600000000L, 14447L, 19008000000000L, 14514L, 19094400000000L, 14581L, 19180800000000L, 14649L, 19267200000000L, 14716L, 19353600000000L, 14783L, 19440000000000L, 14851L, 19526400000000L, 14918L, 19612800000000L, 14985L, 19699200000000L, 15052L, 19785600000000L, 15120L, 19872000000000L, 15187L, 19958400000000L, 15254L, 20044800000000L, 15321L, 20131200000000L, 15388L, 20217600000000L, 15455L, 20304000000000L, 15523L, 20390400000000L, 15590L, 20476800000000L, 15657L, 20563200000000L, 15725L, 20649600000000L, 15792L, 20736000000000L, 15859L, 20822400000000L, 15926L, 20908800000000L, 15993L, 20995200000000L, 16060L, 21081600000000L, 16127L, 21168000000000L, 16194L, 21254400000000L, 16261L, 21340800000000L, 16328L, 21427200000000L, 16395L, 21513600000000L, 16462L, 21600000000000L, 16529L, 21686400000000L, 16596L, 21772800000000L, 16663L, 21859200000000L, 16730),
                chunk("1970/1_1", 21945600000000L, 16797L, 22032000000000L, 16864L, 22118400000000L, 16931L, 22204800000000L, 16999L, 22291200000000L, 17066L, 22377600000000L, 17133L, 22464000000000L, 17200L, 22550400000000L, 17267L, 22636800000000L, 17334L, 22723200000000L, 17401L, 22809600000000L, 17468L, 22896000000000L, 17535L, 22982400000000L, 17602L, 23068800000000L, 17669L, 23155200000000L, 17736L, 23241600000000L, 17803L, 23328000000000L, 17870L, 23414400000000L, 17937L, 23500800000000L, 18004L, 23587200000000L, 18071L, 23673600000000L, 18138L, 23760000000000L, 18207L, 23846400000000L, 18274L, 23932800000000L, 18341L, 24019200000000L, 18408L, 24105600000000L, 18475L, 24192000000000L, 18542L, 24278400000000L, 18609L, 24364800000000L, 18676L, 24451200000000L, 18743L, 24537600000000L, 18810L, 24624000000000L, 18878L, 24710400000000L, 18945L, 24796800000000L, 19012L, 24883200000000L, 19079L, 24969600000000L, 19146L, 25056000000000L, 19213L, 25142400000000L, 19280L, 25228800000000L, 19347L, 25315200000000L, 19414L, 25401600000000L, 19481L, 25488000000000L, 19548L, 25574400000000L, 19615L, 25660800000000L, 19682L, 25747200000000L, 19749L, 25833600000000L, 19816L, 25920000000000L, 19883L, 26006400000000L, 19950L, 26092800000000L, 20017L, 26179200000000L, 20084L, 26265600000000L, 20151L, 26352000000000L, 20218L, 26438400000000L, 20285L, 26524800000000L, 20352L, 26611200000000L, 20420L, 26697600000000L, 20487L, 26784000000000L, 20554L, 26870400000000L, 20621L, 26956800000000L, 20688L, 27043200000000L, 20755L, 27129600000000L, 20822L, 27216000000000L, 20889L, 27302400000000L, 20956L, 27388800000000L, 21023L, 27475200000000L, 21090L, 27561600000000L, 21157L, 27648000000000L, 21224L, 27734400000000L, 21291L, 27820800000000L, 21358L, 27907200000000L, 21426L, 27993600000000L, 21493L, 28080000000000L, 21560L, 28166400000000L, 21629L, 28252800000000L, 21696L, 28339200000000L, 21763L, 28425600000000L, 21830L, 28512000000000L, 21897L, 28598400000000L, 21964L, 28684800000000L, 22031L, 28771200000000L, 22100L, 28857600000000L, 22167L, 28944000000000L, 22234L, 29030400000000L, 22301L, 29116800000000L, 22368L, 29203200000000L, 22435L, 29289600000000L, 22502L, 29376000000000L, 22569L, 29462400000000L, 22636L, 29548800000000L, 22703L, 29635200000000L, 22770L, 29721600000000L, 22837L, 29808000000000L, 22904L, 29894400000000L, 22971L, 29980800000000L, 23038L, 30067200000000L, 23105L, 30153600000000L, 23172L, 30240000000000L, 23240L, 30326400000000L, 23307L, 30412800000000L, 23374L, 30499200000000L, 23441L, 30585600000000L, 23508L, 30672000000000L, 23575L, 30758400000000L, 23643L, 30844800000000L, 23711L, 30931200000000L, 23778L, 31017600000000L, 23845L, 31104000000000L, 23913L, 31190400000000L, 23980L, 31276800000000L, 24047L, 31363200000000L, 24115L, 31449600000000L, 24182),
                chunk("1971/1_1", 31536000000000L, 24249L, 31622400000000L, 24316L, 31708800000000L, 24383L, 31795200000000L, 24450L, 31881600000000L, 24517L, 31968000000000L, 24584L, 32054400000000L, 24651L, 32140800000000L, 24718L, 32227200000000L, 24786L, 32313600000000L, 24853L, 32400000000000L, 24920L, 32486400000000L, 24987L, 32572800000000L, 25054L, 32659200000000L, 25122L, 32745600000000L, 25189L, 32832000000000L, 25256L, 32918400000000L, 25323L, 33004800000000L, 25390L, 33091200000000L, 25457L, 33177600000000L, 25524L, 33264000000000L, 25591L, 33350400000000L, 25658L, 33436800000000L, 25725L, 33523200000000L, 25792L, 33609600000000L, 25859L, 33696000000000L, 25927L, 33782400000000L, 25994L, 33868800000000L, 26062L, 33955200000000L, 26129L, 34041600000000L, 26196L, 34128000000000L, 26263L, 34214400000000L, 26330L, 34300800000000L, 26397L, 34387200000000L, 26464L, 34473600000000L, 26531L, 34560000000000L, 26598L, 34646400000000L, 26665L, 34732800000000L, 26733L, 34819200000000L, 26800L, 34905600000000L, 26867L, 34992000000000L, 26934L, 35078400000000L, 27001L, 35164800000000L, 27069L, 35251200000000L, 27136L, 35337600000000L, 27203L, 35424000000000L, 27270L, 35510400000000L, 27337L, 35596800000000L, 27405L, 35683200000000L, 27472L, 35769600000000L, 27539L, 35856000000000L, 27607L, 35942400000000L, 27674L, 36028800000000L, 27741L, 36115200000000L, 27808L, 36201600000000L, 27875L, 36288000000000L, 27942L, 36374400000000L, 28009L, 36460800000000L, 28076L, 36547200000000L, 28143L, 36633600000000L, 28210L, 36720000000000L, 28278L, 36806400000000L, 28347L, 36892800000000L, 28414L, 36979200000000L, 28482L, 37065600000000L, 28549L, 37152000000000L, 28616L, 37238400000000L, 28683L, 37324800000000L, 28750L, 37411200000000L, 28817L, 37497600000000L, 28884L, 37584000000000L, 28951L, 37670400000000L, 29018L, 37756800000000L, 29085L, 37843200000000L, 29152L, 37929600000000L, 29219L, 38016000000000L, 29286L, 38102400000000L, 29353L, 38188800000000L, 29421L, 38275200000000L, 29488L, 38361600000000L, 29555L, 38448000000000L, 29622L, 38534400000000L, 29690L, 38620800000000L, 29758L, 38707200000000L, 29825L, 38793600000000L, 29892L, 38880000000000L, 29959L, 38966400000000L, 30026L, 39052800000000L, 30093L, 39139200000000L, 30160L, 39225600000000L, 30229L, 39312000000000L, 30296L, 39398400000000L, 30363L, 39484800000000L, 30430L, 39571200000000L, 30497L, 39657600000000L, 30564L, 39744000000000L, 30631L, 39830400000000L, 30698L, 39916800000000L, 30765L, 40003200000000L, 30832L, 40089600000000L, 30899L, 40176000000000L, 30966L, 40262400000000L, 31033L, 40348800000000L, 31100L, 40435200000000L, 31167L, 40521600000000L, 31234L, 40608000000000L, 31301L, 40694400000000L, 31368L, 40780800000000L, 31435L, 40867200000000L, 31502L, 40953600000000L, 31569L, 41040000000000L, 31636L, 41126400000000L, 31703L, 41212800000000L, 31770L, 41299200000000L, 31838L, 41385600000000L, 31905L, 41472000000000L, 31972L, 41558400000000L, 32039L, 41644800000000L, 32106L, 41731200000000L, 32173L, 41817600000000L, 32240L, 41904000000000L, 32307L, 41990400000000L, 32374L, 42076800000000L, 32441L, 42163200000000L, 32508L, 42249600000000L, 32575L, 42336000000000L, 32643L, 42422400000000L, 32710L, 42508800000000L, 32777L, 42595200000000L, 32844L, 42681600000000L, 32911L, 42768000000000L, 32978L, 42854400000000L, 33045L, 42940800000000L, 33112L, 43027200000000L, 33179L, 43113600000000L, 33246L, 43200000000000L, 33313L, 43286400000000L, 33380L, 43372800000000L, 33447),
                chunk("1971/2_1", 43459200000000L, 33514L, 43545600000000L, 33581L, 43632000000000L, 33648L, 43718400000000L, 33715L, 43804800000000L, 33782L, 43891200000000L, 33849L, 43977600000000L, 33916L, 44064000000000L, 33983L, 44150400000000L, 34050L, 44236800000000L, 34117L, 44323200000000L, 34184L, 44409600000000L, 34251L, 44496000000000L, 34318L, 44582400000000L, 34385L, 44668800000000L, 34452L, 44755200000000L, 34519L, 44841600000000L, 34586L, 44928000000000L, 34653L, 45014400000000L, 34720L, 45100800000000L, 34787L, 45187200000000L, 34854L, 45273600000000L, 34921L, 45360000000000L, 34989L, 45446400000000L, 35056L, 45532800000000L, 35123L, 45619200000000L, 35190L, 45705600000000L, 35257L, 45792000000000L, 35324L, 45878400000000L, 35391L, 45964800000000L, 35458L, 46051200000000L, 35525L, 46137600000000L, 35592L, 46224000000000L, 35659L, 46310400000000L, 35726L, 46396800000000L, 35793L, 46483200000000L, 35860L, 46569600000000L, 35928L, 46656000000000L, 35995L, 46742400000000L, 36062L, 46828800000000L, 36129L, 46915200000000L, 36196L, 47001600000000L, 36263L, 47088000000000L, 36330L, 47174400000000L, 36397L, 47260800000000L, 36464L, 47347200000000L, 36531L, 47433600000000L, 36599L, 47520000000000L, 36666L, 47606400000000L, 36733L, 47692800000000L, 36801L, 47779200000000L, 36868L, 47865600000000L, 36935L, 47952000000000L, 37002L, 48038400000000L, 37069L, 48124800000000L, 37137L, 48211200000000L, 37205L, 48297600000000L, 37272L, 48384000000000L, 37339L, 48470400000000L, 37406L, 48556800000000L, 37473L, 48643200000000L, 37540L, 48729600000000L, 37607L, 48816000000000L, 37674L, 48902400000000L, 37741L, 48988800000000L, 37808L, 49075200000000L, 37875L, 49161600000000L, 37942L, 49248000000000L, 38009L, 49334400000000L, 38076L, 49420800000000L, 38143L, 49507200000000L, 38210L, 49593600000000L, 38277L, 49680000000000L, 38344L, 49766400000000L, 38411L, 49852800000000L, 38478L, 49939200000000L, 38545L, 50025600000000L, 38613L, 50112000000000L, 38680L, 50198400000000L, 38747L, 50284800000000L, 38814L, 50371200000000L, 38881L, 50457600000000L, 38948L, 50544000000000L, 39016L, 50630400000000L, 39083L, 50716800000000L, 39150L, 50803200000000L, 39217L, 50889600000000L, 39284L, 50976000000000L, 39351L, 51062400000000L, 39418L, 51148800000000L, 39485L, 51235200000000L, 39552L, 51321600000000L, 39619L, 51408000000000L, 39687L, 51494400000000L, 39754L, 51580800000000L, 39821L, 51667200000000L, 39888L, 51753600000000L, 39956L, 51840000000000L, 40023L, 51926400000000L, 40090L, 52012800000000L, 40157L, 52099200000000L, 40224L, 52185600000000L, 40291L, 52272000000000L, 40358L, 52358400000000L, 40425L, 52444800000000L, 40492L, 52531200000000L, 40559L, 52617600000000L, 40626L, 52704000000000L, 40693L, 52790400000000L, 40760L, 52876800000000L, 40827L, 52963200000000L, 40894L, 53049600000000L, 40962L, 53136000000000L, 41029L, 53222400000000L, 41096L, 53308800000000L, 41163L, 53395200000000L, 41230L, 53481600000000L, 41297L, 53568000000000L, 41364L, 53654400000000L, 41431L, 53740800000000L, 41498L, 53827200000000L, 41565L, 53913600000000L, 41632L, 54000000000000L, 41699L, 54086400000000L, 41767L, 54172800000000L, 41834L, 54259200000000L, 41901L, 54345600000000L, 41968L, 54432000000000L, 42035L, 54518400000000L, 42102L, 54604800000000L, 42169L, 54691200000000L, 42236L, 54777600000000L, 42303L, 54864000000000L, 42370L, 54950400000000L, 42437L, 55036800000000L, 42504L, 55123200000000L, 42571L, 55209600000000L, 42638L, 55296000000000L, 42705L, 55382400000000L, 42772L, 55468800000000L, 42839L, 55555200000000L, 42906L, 55641600000000L, 42973L, 55728000000000L, 43040L, 55814400000000L, 43107L, 55900800000000L, 43174L, 55987200000000L, 43241L, 56073600000000L, 43308L, 56160000000000L, 43375L, 56246400000000L, 43442L, 56332800000000L, 43509L, 56419200000000L, 43576L, 56505600000000L, 43643L, 56592000000000L, 43710L, 56678400000000L, 43777L, 56764800000000L, 43844L, 56851200000000L, 43911L, 56937600000000L, 43978L, 57024000000000L, 44046L, 57110400000000L, 44113L, 57196800000000L, 44180L, 57283200000000L, 44247L, 57369600000000L, 44314L, 57456000000000L, 44381L, 57542400000000L, 44448L, 57628800000000L, 44516L, 57715200000000L, 44583L, 57801600000000L, 44650L, 57888000000000L, 44717L, 57974400000000L, 44784L, 58060800000000L, 44851L, 58147200000000L, 44918L, 58233600000000L, 44985L, 58320000000000L, 45052L, 58406400000000L, 45119L, 58492800000000L, 45186L, 58579200000000L, 45253L, 58665600000000L, 45320L, 58752000000000L, 45387L, 58838400000000L, 45454L, 58924800000000L, 45521L, 59011200000000L, 45588L, 59097600000000L, 45655L, 59184000000000L, 45722L, 59270400000000L, 45789L, 59356800000000L, 45856L, 59443200000000L, 45923L, 59529600000000L, 45990L, 59616000000000L, 46058L, 59702400000000L, 46125L, 59788800000000L, 46192L, 59875200000000L, 46259L, 59961600000000L, 46326L, 60048000000000L, 46393L, 60134400000000L, 46460L, 60220800000000L, 46527L, 60307200000000L, 46594L, 60393600000000L, 46661L, 60480000000000L, 46728L, 60566400000000L, 46795L, 60652800000000L, 46862L, 60739200000000L, 46929L, 60825600000000L, 46996L, 60912000000000L, 47063L, 60998400000000L, 47130L, 61084800000000L, 47197L, 61171200000000L, 47264L, 61257600000000L, 47331L, 61344000000000L, 47398L, 61430400000000L, 47465L, 61516800000000L, 47532L, 61603200000000L, 47599L, 61689600000000L, 47666L, 61776000000000L, 47733L, 61862400000000L, 47800L, 61948800000000L, 47867L, 62035200000000L, 47934L, 62121600000000L, 48001L, 62208000000000L, 48068L, 62294400000000L, 48135L, 62380800000000L, 48202L, 62467200000000L, 48269L, 62553600000000L, 48336L, 62640000000000L, 48403L, 62726400000000L, 48470L, 62812800000000L, 48537L, 62899200000000L, 48604L, 62985600000000L, 48671),
                chunk("1972/2_1", 63072000000000L, 48738L, 63158400000000L, 48806L, 63244800000000L, 48873L, 63331200000000L, 48940L, 63417600000000L, 49007L, 63504000000000L, 49074L, 63590400000000L, 49142L, 63676800000000L, 49209L, 63763200000000L, 49276L, 63849600000000L, 49344L, 63936000000000L, 49411L, 64022400000000L, 49478L, 64108800000000L, 49545L, 64195200000000L, 49612L, 64281600000000L, 49679L, 64368000000000L, 49746L, 64454400000000L, 49813L, 64540800000000L, 49881L, 64627200000000L, 49948L, 64713600000000L, 50015L, 64800000000000L, 50082L, 64886400000000L, 50149),
                chunk("1972/3_1", 64972800000000L, 50216L, 65059200000000L, 50283L, 65145600000000L, 50350L, 65232000000000L, 50417L, 65318400000000L, 50484L, 65404800000000L, 50551L, 65491200000000L, 50618L, 65577600000000L, 50685L, 65664000000000L, 50752L, 65750400000000L, 50819L, 65836800000000L, 50886L, 65923200000000L, 50953L, 66009600000000L, 51020L, 66096000000000L, 51087L, 66182400000000L, 51154L, 66268800000000L, 51221L, 66355200000000L, 51288L, 66441600000000L, 51355L, 66528000000000L, 51422L, 66614400000000L, 51489L, 66700800000000L, 51556L, 66787200000000L, 51623L, 66873600000000L, 51691L, 66960000000000L, 51758L, 67046400000000L, 51825L, 67132800000000L, 51892L, 67219200000000L, 51959L, 67305600000000L, 52026L, 67392000000000L, 52093L, 67478400000000L, 52160L, 67564800000000L, 52227L, 67651200000000L, 52294L, 67737600000000L, 52361L, 67824000000000L, 52429L, 67910400000000L, 52497L, 67996800000000L, 52564L, 68083200000000L, 52631L, 68169600000000L, 52698L, 68256000000000L, 52765L, 68342400000000L, 52832L, 68428800000000L, 52899L, 68515200000000L, 52966L, 68601600000000L, 53033L, 68688000000000L, 53100L, 68774400000000L, 53167L, 68860800000000L, 53234L, 68947200000000L, 53301L, 69033600000000L, 53368L, 69120000000000L, 53435L, 69206400000000L, 53502L, 69292800000000L, 53569L, 69379200000000L, 53636L, 69465600000000L, 53703L, 69552000000000L, 53770L, 69638400000000L, 53837L, 69724800000000L, 53904L, 69811200000000L, 53972L, 69897600000000L, 54039L, 69984000000000L, 54106L, 70070400000000L, 54173L, 70156800000000L, 54240L, 70243200000000L, 54307L, 70329600000000L, 54374L, 70416000000000L, 54441L, 70502400000000L, 54508L, 70588800000000L, 54575L, 70675200000000L, 54642L, 70761600000000L, 54709L, 70848000000000L, 54776L, 70934400000000L, 54843L, 71020800000000L, 54910L, 71107200000000L, 54977L, 71193600000000L, 55044L, 71280000000000L, 55111L, 71366400000000L, 55178L, 71452800000000L, 55246L, 71539200000000L, 55313L, 71625600000000L, 55380L, 71712000000000L, 55447L, 71798400000000L, 55514L, 71884800000000L, 55581L, 71971200000000L, 55648L, 72057600000000L, 55715L, 72144000000000L, 55782L, 72230400000000L, 55849L, 72316800000000L, 55916L, 72403200000000L, 55983L, 72489600000000L, 56050L, 72576000000000L, 56117L, 72662400000000L, 56184L, 72748800000000L, 56251L, 72835200000000L, 56318L, 72921600000000L, 56385L, 73008000000000L, 56452L, 73094400000000L, 56519L, 73180800000000L, 56586L, 73267200000000L, 56653L, 73353600000000L, 56720L, 73440000000000L, 56787L, 73526400000000L, 56854L, 73612800000000L, 56921L, 73699200000000L, 56988L, 73785600000000L, 57055L, 73872000000000L, 57122L, 73958400000000L, 57189L, 74044800000000L, 57256L, 74131200000000L, 57323L, 74217600000000L, 57390L, 74304000000000L, 57457L, 74390400000000L, 57524L, 74476800000000L, 57591L, 74563200000000L, 57658L, 74649600000000L, 57725L, 74736000000000L, 57792L, 74822400000000L, 57859L, 74908800000000L, 57926L, 74995200000000L, 57993L, 75081600000000L, 58060L, 75168000000000L, 58127L, 75254400000000L, 58194L, 75340800000000L, 58261L, 75427200000000L, 58328L, 75513600000000L, 58395L, 75600000000000L, 58462L, 75686400000000L, 58529L, 75772800000000L, 58596L, 75859200000000L, 58663L, 75945600000000L, 58731L, 76032000000000L, 58798L, 76118400000000L, 58865L, 76204800000000L, 58933L, 76291200000000L, 59000L, 76377600000000L, 59068L, 76464000000000L, 59135L, 76550400000000L, 59202L, 76636800000000L, 59269L, 76723200000000L, 59336L, 76809600000000L, 59403L, 76896000000000L, 59470L, 76982400000000L, 59537L, 77068800000000L, 59604L, 77155200000000L, 59671L, 77241600000000L, 59738L, 77328000000000L, 59805L, 77414400000000L, 59872L, 77500800000000L, 59939L, 77587200000000L, 60007L, 77673600000000L, 60074L, 77760000000000L, 60142L, 77846400000000L, 60209L, 77932800000000L, 60276L, 78019200000000L, 60343L, 78105600000000L, 60410L, 78192000000000L, 60477L, 78278400000000L, 60544L, 78364800000000L, 60611L, 78451200000000L, 60678L, 78537600000000L, 60745L, 78624000000000L, 60812L, 78710400000000L, 60879L, 78796800000000L, 60946L, 78883200000000L, 61013L, 78969600000000L, 61080L, 79056000000000L, 61147L, 79142400000000L, 61215L, 79228800000000L, 61282L, 79315200000000L, 61349L, 79401600000000L, 61416L, 79488000000000L, 61483L, 79574400000000L, 61550L, 79660800000000L, 61617L, 79747200000000L, 61684L, 79833600000000L, 61751L, 79920000000000L, 61818L, 80006400000000L, 61885L, 80092800000000L, 61952L, 80179200000000L, 62019L, 80265600000000L, 62086L, 80352000000000L, 62153L, 80438400000000L, 62220L, 80524800000000L, 62287L, 80611200000000L, 62354L, 80697600000000L, 62421L, 80784000000000L, 62489L, 80870400000000L, 62556L, 80956800000000L, 62625L, 81043200000000L, 62692L, 81129600000000L, 62759L, 81216000000000L, 62826L, 81302400000000L, 62893L, 81388800000000L, 62960L, 81475200000000L, 63027L, 81561600000000L, 63094L, 81648000000000L, 63161L, 81734400000000L, 63228L, 81820800000000L, 63295L, 81907200000000L, 63362L, 81993600000000L, 63429L, 82080000000000L, 63496L, 82166400000000L, 63563L, 82252800000000L, 63630L, 82339200000000L, 63699L, 82425600000000L, 63766L, 82512000000000L, 63833L, 82598400000000L, 63900L, 82684800000000L, 63967L, 82771200000000L, 64034L, 82857600000000L, 64101L, 82944000000000L, 64168L, 83030400000000L, 64236L, 83116800000000L, 64303L, 83203200000000L, 64371L, 83289600000000L, 64438L, 83376000000000L, 64505L, 83462400000000L, 64572L, 83548800000000L, 64639L, 83635200000000L, 64706L, 83721600000000L, 64774L, 83808000000000L, 64841L, 83894400000000L, 64908L, 83980800000000L, 64975L, 84067200000000L, 65042L, 84153600000000L, 65109L, 84240000000000L, 65176L, 84326400000000L, 65244L, 84412800000000L, 65311L, 84499200000000L, 65378L, 84585600000000L, 65445L, 84672000000000L, 65512L, 84758400000000L, 65579L, 84844800000000L, 65646L, 84931200000000L, 65714L, 85017600000000L, 65781L, 85104000000000L, 65848L, 85190400000000L, 65915L, 85276800000000L, 65982L, 85363200000000L, 66049L, 85449600000000L, 66116L, 85536000000000L, 66183L, 85622400000000L, 66250L, 85708800000000L, 66317L, 85795200000000L, 66384L, 85881600000000L, 66452L, 85968000000000L, 66519L, 86054400000000L, 66586L, 86140800000000L, 66653L, 86227200000000L, 66720L, 86313600000000L, 66787L, 86400000000000L, 66854)
        );
    }

    private void assertIndexChunks(int workerCount, String fileName, IndexChunk... expectedChunks) throws Exception {
        assertIndexChunks(workerCount, "yyyy-MM-ddTHH:mm:ss.SSSZ", PartitionBy.DAY, fileName, expectedChunks);
    }

    private void assertIndexChunks(int workerCount, String dateFormat, int partitionBy, String fileName, IndexChunk... expectedChunks) throws Exception {
        assertIndexChunks(workerCount, dateFormat, partitionBy, -1/* use default */, fileName, expectedChunks);
    }

    private void assertIndexChunks(int workerCount, String dateFormat, int partitionBy, int bufferSize, String fileName, IndexChunk... expectedChunks) throws Exception {
        executeWithPool(workerCount, 8, bufferSize,
                (CairoEngine engine, SqlCompiler compiler, SqlExecutionContext sqlExecutionContext) ->
                        assertIndexChunksFor(sqlExecutionContext, dateFormat, partitionBy, fileName, expectedChunks));
    }

    static IndexChunk chunk(String path, long... data) {
        return new IndexChunk(path, data);
    }

    static class IndexChunk {
        String path;
        long[] data;//timestamp+offset pairs

        IndexChunk(String path, long... data) {
            this.path = path;
            this.data = data;
        }

        @Override
        public String toString() {
            return "{" +
                    "path='" + path + '\'' +
                    ", data=" + Arrays.toString(data) +
                    '}';
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            IndexChunk that = (IndexChunk) o;
            return path.equals(that.path) && Arrays.equals(data, that.data);
        }

        @Override
        public int hashCode() {
            int result = Objects.hash(path);
            result = 31 * result + Arrays.hashCode(data);
            return result;
        }
    }

    static ObjList<IndexChunk> list(IndexChunk... chunks) {
        ObjList<IndexChunk> result = new ObjList<>(chunks.length);
        for (int i = 0; i < chunks.length; i++) {
            result.add(chunks[i]);
        }
        return result;
    }

    private void assertIndexChunksFor(SqlExecutionContext sqlExecutionContext, String format, int partitionBy, String fileName, IndexChunk... expectedChunks)
            throws SqlException, IOException {
        FilesFacade ff = engine.getConfiguration().getFilesFacade();
        inputRoot = new File("./src/test/resources/csv/").getAbsolutePath();

        try (Path path = new Path().of(inputRoot).slash().concat(fileName).$();
             FileIndexer indexer = new FileIndexer(sqlExecutionContext)) {
            indexer.setMinChunkSize(1);
            DateFormat dateFormat = new TimestampFormatCompiler().compile(format);
            indexer.of(fileName, partitionBy, (byte) ',', 1, dateFormat, false);

            long fd = ff.openRO(path);
            Assert.assertTrue(fd > -1);

            try {
                indexer.findChunkBoundaries(fd);
                indexer.indexChunks();
            } finally {
                ff.close(fd);
            }
        }

        ObjList<IndexChunk> actualChunks = readIndexChunks(new File(inputWorkRoot, fileName));
        Assert.assertEquals(list(expectedChunks), actualChunks);
    }

    private ObjList<IndexChunk> readIndexChunks(File root) {
        List<File> indexChunks = findAllFilesIn(root);
        indexChunks.sort(Comparator.comparing(File::getAbsolutePath));

        Path p = new Path();
        MemoryCMARWImpl memory = new MemoryCMARWImpl();
        ObjList<IndexChunk> result = new ObjList<>();

        try {
            for (File chunk : indexChunks) {
                p.of(chunk.getAbsolutePath()).$();
                memory.smallFile(engine.getConfiguration().getFilesFacade(), p, MemoryTag.NATIVE_DEFAULT);
                long[] data = new long[(int) chunk.length() / Long.BYTES];

                for (int i = 0; i < data.length; i++) {
                    data[i] = memory.getLong(i * Long.BYTES);
                }

                result.add(new IndexChunk(chunk.getParentFile().getName() + "/" + chunk.getName(), data));
            }
        } finally {
            p.close();
            memory.close(false);
        }

        return result;
    }

    private List<File> findAllFilesIn(File root) {
        List<File> result = new ArrayList<>();
        File[] files = root.listFiles();
        for (File f : files) {
            if (f.isDirectory()) {
                result.addAll(findAllFilesIn(f));
            } else if (f.isFile()) {
                result.add(f);
            }
        }

        return result;
    }

    @Ignore
    @Test
    public void testSimpleCsv() throws Exception {
        executeWithPool(4, 8, (CairoEngine engine, SqlCompiler compiler, SqlExecutionContext sqlExecutionContext) -> {
            //String inputDir = new File(".").getAbsolutePath();
            inputRoot = new File("E:/dev/tmp").getAbsolutePath();

            //try (Path path = new Path().of(inputDir).slash().concat("src/test/resources/csv/test-import.csv").$();
            try (FileIndexer indexer = new FileIndexer(sqlExecutionContext)) {
                DateFormat dateFormat = new TimestampFormatCompiler().compile("yyyy-MM-ddTHH:mm:ss.SSSUUUZ");
                //unordered_trips_300mil.csv
                indexer.of("trips300mil.csv", PartitionBy.MONTH, (byte) ',', 2, dateFormat, true);
                indexer.process();
            }
        });
    }

    @Test
    public void testSimpleCsvWithPool() throws Exception {
        executeWithPool(4, 8, (CairoEngine engine, SqlCompiler compiler, SqlExecutionContext sqlExecutionContext) -> {
            //Thread.sleep(180000);
        });
    }

    @Test
    public void testProcessLargeCsvWithPool0() throws Exception {
        executeWithPool(8, 16, (CairoEngine engine, SqlCompiler compiler, SqlExecutionContext sqlExecutionContext) -> {
            FilesFacade ff = engine.getConfiguration().getFilesFacade();
            inputRoot = new File("./src/test/resources/csv/").getAbsolutePath();
            try (FileIndexer indexer = new FileIndexer(sqlExecutionContext)) {
                DateFormat dateFormat = new TimestampFormatCompiler().compile("yyyy-MM-ddTHH:mm:ss.SSSSSSZ");
                indexer.setMinChunkSize(10);
                indexer.of("test-quotes-big.csv", PartitionBy.MONTH, (byte) ',', 1, dateFormat, true);
                indexer.parseStructure();
                indexer.process();
            }
        });
    }

    @Test
    public void testIndexSort() throws Exception {
        FilesFacade ff = engine.getConfiguration().getFilesFacade();
        try (Path path = new Path().of(inputRoot).slash().concat("chunk").$();
             FileIndexer indexer = new FileIndexer(sqlExecutionContext)) {

            MemoryPMARImpl chunk = new MemoryPMARImpl(ff, path, ff.getPageSize(), MemoryTag.MMAP_DEFAULT, CairoConfiguration.O_NONE);
            try {
                long lo = 0;
                long hi = Long.MAX_VALUE;
                long range = hi - lo + 1;
                for (int i = 0; i < 10; i++) {
                    final long z = lo + rnd.nextPositiveLong() % range;
//                    final long z = 10 - i;
                    chunk.putLong(z);
                    chunk.putLong(i);
                }
            } finally {
                chunk.close(true, Vm.TRUNCATE_TO_POINTER);
            }

            //indexer.sort(path)//TODO: TEST !
            long len = ff.length(path.$());
            try (MemoryCMRImpl sorted = new MemoryCMRImpl(ff, path.$(), len, MemoryTag.MMAP_DEFAULT)) {
                long offset = 0;
                while (offset < len) {
                    long ts = sorted.getLong(offset);
                    long id = sorted.getLong(offset + 8);
                    System.err.println(ts);
                    System.err.println(id);
                    offset += 16;
                }
            }
            ff.remove(path);
//            System.err.println("---------------");
//            try(MemoryCMRImpl sorted = new MemoryCMRImpl(ff, path.chop$().put(".s").$(), len, MemoryTag.MMAP_DEFAULT)) {
//                long offset = 0;
//                while (offset < len) {
//                    long ts = sorted.getLong(offset);
//                    long id = sorted.getLong(offset + 8);
//                    System.err.println(ts);
//                    System.err.println(id);
//                    offset += 16;
//                }
//            }
        }
    }

    private void createAndSortChunkFiles(Path path, int nChunks, int chunkSizeMin, int chunkSizeMax) throws IOException {
        FilesFacade ff = engine.getConfiguration().getFilesFacade();
        int plen = path.length();
        for (int i = 0; i < nChunks; i++) {
            path.trimTo(plen);
            path.slash().concat("chunk").put(i).$();
            try (FileIndexer indexer = new FileIndexer(sqlExecutionContext)) {
                long rng = chunkSizeMax - chunkSizeMin + 1;
                final long count = chunkSizeMin + rnd.nextPositiveLong() % rng;

                MemoryPMARImpl chunk = new MemoryPMARImpl(ff, path, ff.getPageSize(), MemoryTag.MMAP_DEFAULT, CairoConfiguration.O_NONE);
                try {
                    long lo = 0;
                    long hi = Long.MAX_VALUE;
                    long range = hi - lo + 1;
                    for (int v = 0; v < count; v++) {
                        final long z = lo + rnd.nextPositiveLong() % range;
                        chunk.putLong(z);
                        chunk.putLong(v);
                    }
                } finally {
                    chunk.close(true, Vm.TRUNCATE_TO_POINTER);
                }
                //indexer.sort(path);//TODO: fix 
            }
        }
        path.trimTo(plen);
    }

    protected void executeWithPool(
            int workerCount,
            int queueCapacity,
            TextImportRunnable runnable
    ) throws Exception {
        executeWithPool(workerCount, queueCapacity, -1, runnable);
    }

    protected void executeWithPool(
            int workerCount,
            int queueCapacity,
            int readBufferSize,
            TextImportRunnable runnable
    ) throws Exception {
        executeVanilla(() -> {
            if (workerCount > 0) {

                int[] affinity = new int[workerCount];
                for (int i = 0; i < workerCount; i++) {
                    affinity[i] = -1;
                }

                WorkerPool pool = new WorkerPool(
                        new WorkerPoolAwareConfiguration() {
                            @Override
                            public int[] getWorkerAffinity() {
                                return affinity;
                            }

                            @Override
                            public int getWorkerCount() {
                                return workerCount;
                            }

                            @Override
                            public boolean haltOnError() {
                                return false;
                            }

                            @Override
                            public boolean isEnabled() {
                                return true;
                            }
                        },
                        Metrics.disabled()
                );

                final CairoConfiguration configuration = new DefaultCairoConfiguration(root) {
                    @Override
                    public FilesFacade getFilesFacade() {
                        return FilesFacadeImpl.INSTANCE;
                    }

                    @Override
                    public CharSequence getInputWorkRoot() {
                        return FileSplitterTest.inputWorkRoot;
                    }

                    @Override
                    public CharSequence getInputRoot() {
                        return FileSplitterTest.inputRoot;
                    }

                    @Override
                    public int getSqlCopyBufferSize() {
                        if (readBufferSize > 0) {
                            return readBufferSize;
                        }
                        return super.getSqlCopyBufferSize();
                    }
                };

                execute(pool, runnable, configuration);
            } else {
                // we need to create entire engine
                final CairoConfiguration configuration = new DefaultCairoConfiguration(root) {
                    @Override
                    public FilesFacade getFilesFacade() {
                        return FilesFacadeImpl.INSTANCE;
                    }

                    @Override
                    public int getLatestByQueueCapacity() {
                        return queueCapacity;
                    }
                };
                execute(null, runnable, configuration);
            }
        });
    }

    protected static void execute(
            @Nullable WorkerPool pool,
            TextImportRunnable runnable,
            CairoConfiguration configuration
    ) throws Exception {
        final int workerCount = pool == null ? 1 : pool.getWorkerCount();
        try (
                final CairoEngine engine = new CairoEngine(configuration);
                final SqlCompiler compiler = new SqlCompiler(engine)
        ) {
            try (final SqlExecutionContext sqlExecutionContext = new SqlExecutionContextImpl(engine, workerCount)
            ) {
                try {
                    if (pool != null) {
                        pool.assignCleaner(Path.CLEANER);
                        pool.assign(new TextImportJob(engine.getMessageBus())); //todo: copy-pasted, refactor this
                        pool.start(LOG);
                    }

                    runnable.run(engine, compiler, sqlExecutionContext);
                    Assert.assertEquals(0, engine.getBusyWriterCount());
                    Assert.assertEquals(0, engine.getBusyReaderCount());
                } finally {
                    if (pool != null) {
                        pool.halt();
                    }
                }
            }
        }
    }

    static void executeVanilla(TestUtils.LeakProneCode code) throws Exception {
        TestUtils.assertMemoryLeak(code);
    }

    @FunctionalInterface
    interface TextImportRunnable {
        void run(CairoEngine engine, SqlCompiler compiler, SqlExecutionContext sqlExecutionContext) throws Exception;
    }
}

